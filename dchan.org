#+TITLE: dchan - distributed channel
#+AUTHOR: Tiago Natel de Moura
#+EMAIL: tiago4orion@gmail.com
#+DATE: {{{time(%Y-%m-%d)}}}
#+DESCRIPTION: Dchan is a distributed CSP channel
#+KEYWORDS: dchan, CSP, go, golang, distributed, stream-processing, queue
#+LANGUAGE: en

#+STARTUP: overview
#+TAGS: PROJECT(p)
#+STARTUP: hidestars


#+INCLUDE: "tex/latex.setup"

#+INCLUDE: "README.org" :minlevel 1

* API
#+INCLUDE: "docs/api.org" :minlevel 2

* Terminology

This document uses a number of terms to refer to the roles played by
participants in, and objects of, the Dchan communication.

- goroutine: Go lightweight threads that represent anonymous processes
  in the CSP terminology.
- channel: Entity shared between processes whose purpose is to provide
  means of communication.
- Rprocess: Reader goroutine of a read 9P request.
- Wprocess: Writer goroutine of a write 9P request.

* Architecture
#+INCLUDE: "docs/arch.org" :minlevel 2

* Makefile

First of all, we need a Makefile to build this document and source
code.

The most used commands are:

- **make** to make a full rebuild of everything.
- **make tangle** to extract source code
- **make build** to build dchan software

#+BEGIN_SRC makefile :tangle Makefile :comments link
# A generic orgmode Makefile, by Todd Lewis <tlewis@brickabode.com>
# 23 February 2016
# This document is released to the public domain, though with no
# warranties; use at your own risk

.PHONY: build


# To install `dchan', type `make' and then `make install'.
BIN_DIR=/usr/local/bin
OBJ=dchan
DOC_BOOK=dchan.org
DOC_SRCFILES=$(wildcard unix/dchan/*.org)
HTMLS=$(patsubst %.org,%.html,$(DOC_BOOK))
TXTS=$(patsubst %.org,%.txt,$(DOC_BOOK))
PDFS=$(patsubst %.org,%.pdf,$(DOC_BOOK))

all: clean $(OBJ) $(HTMLS) $(TXTS) $(PDFS)

clean-latex:
	rm -f *.blg *.bbl *.tex *.odt *.toc *.out *.aux

clean-source:
	rm -f *.go

clean: clean-latex clean-source
	rm -f *.png
	rm -f *.txt *.html *.pdf *.odt
	rm -f *.log

%.html: %.org
	org2html $<

%.txt: %.org
	org2txt  $<

%.pdf: %.org
	org2pdf $<
	-pdflatex dchan.tex
	bibtex dchan
	pdflatex dchan.tex
	pdflatex dchan.tex

tangle: $(DOC_SRCFILES)
	org-tangle $<

build: $(OBJ)
doc: $(HTMLS) $(PDFS) $(TXTS)

$(OBJ): tangle
	cd unix/dchan/ && make

test: tangle
	go test -v ./...

install:
	cp $(OBJ) $(BIN_DIR)


# To include an automatic version number in your file, use a header like this:
#
,#+OPTIONS: VERSION:$Version: $
#
# Then you can use this rule to automatically update it;
# to update file foo.org, just do "make foo.version".

%.version: %.org
	(ver=`date +%s`; cat $< | sed 's/\$$Version:[^$$]*\$$/$$Version: '$$ver' $$/g' > .version-$$ver && mv .version-$$ver $< && echo Versioned $<)
#+END_SRC

* Building

To build the software and book you need execute:

#+NAME: building
#+CAPTION: building
#+BEGIN_SRC bash
make
#+END_SRC

* Development
#+INCLUDE: "unix/dchan/dchan.org" :minlevel 2

* Bibliography

\bibliographystyle{plainnat}
\bibliography{./dchan}


* Footnotes

[fn:1] R. Milner, "A Calculus of Communicating Systems", Lecture Notes
in Computer Science, Vol. 92, Springer-Verlag, 1980.

[fn:2] Ptolemy II: http://ptolemy.eecs.berkeley.edu/papers/99/HMAD/html/csp.html

[fn:3] https://golang.org/ref/spec\#Select_statements
