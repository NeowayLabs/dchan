To achieve the first goal dchan uses a file tree interface over
network. Simple files (real disk files) aren't suitable for IPC
because of the global nature of the disk incurring races in concurrent
access between processes. But UNIX operating systems supports the idea
of virtual file systems (VFS), an abstraction layer on top of a more
concrete file system, to make possible client application's
interact with different kind of concrete file systems in a uniform
way. In practical, VFS is a kernel interface (or contract) to file
system drivers.

On linux, every file system driver implements the VFS contract, and
then it's possible to every program that read and write on files to
use any file system without code changes. It's good because old tools
like cat, sed, tail, and so on, can be used for network file systems
without changes. The VFS is useful to build stackable (or union fs
mounts) file systems and this will be explained in the [[Composability][Composability]]
section.

Network file systems are a class of file systems that (commonly) map
userspace IO operations into remote procedure calls, turning possible
interact with remote resources as if it were local. NFS (Network File
System) and 9P works this way, the former being a very complex
protocol commonly used with kernel drivers on client and server side,
but the latter being very simple, allowing userspace file servers. For
9P exists tons of libraries for various programming languages to
develop clients and servers. For NFS exists only one server side
implementation in userspace and no library for creating new file
servers.

Dchan uses the 9P as network file system protocol behind the
scenes. This mean that you can mount the dchan file-tree
locally and interact with channels as if it were simple files in the
mounted directory.

Linux kernel have native support in the kernel to create 9P clients
(not servers), making easy to mount dchan file trees in each linux box.

For more information on 9P implementation see the link below:

http://9p.cat-v.org/implementations

** CSP Communication Semantics

Dchan uses the Communicating Sequential Processing semantics on top of
the virtual file interface. At core of the CSP semantics are two
fundamental ideas:

- Atomic communication
- Non-deterministic choice.

It's the same concepts as independently defined by Robin Milner in the
Calculus of Communicating Systems (CCS)[fn:1].

** Atomic communication

Atomic communication is obtained by rendezvous points. Rendezvous
points are places in time and space, where processes who are trying to
communicate, meet each other in order to occur the communication. During
rendezvous both the sender and receiver processes block until the
other side is ready to communicate and implies that the sending and
receiving of a message occurs simultaneously.

#+BEGIN_QUOTE
A real world analogy to rendezvous can be found in telephone
communications (without answering machines). Both the caller and
callee must be simultaneously present for a phone conversation to
occur.
Neil Smith at [[http://ptolemy.eecs.berkeley.edu/papers/99/HMAD/html/csp.html][CSP Domain]]
#+END_QUOTE

The image below shows the communication between Process A and B. At
some moment in time Process A blocks in the Send call because of
Process B isn't ready to communicate. When Process B calls Recv, the
communication happens, data is transferred from Process A to B and
Process A finally unblock and continue execution.

#+BEGIN_SRC ditaa :file images/rendezvous.png


    Progress       Process A                  Process B
       |               *                          *
       |               |                          |
       |               |                          |
       |               V                          |
       |        Send(chan, val)                   |
       |             -----                        |
       |               ^                          |
       |       Blocked |                          V
       |               V     Data transfer  Recv(chan, val)
       |             -----  <------------->     -----
       |               |                          |
       |               |                          |
       |               |                          |
       V               V                          V


#+END_SRC

#+RESULTS:
[[file:images/rendezvous.png]]

Depending on the CSP implementation, channels can be buffered, in
other words, in this way it's a queue with limited size. But
independently of channel type, the following is true:

#+BEGIN_QUOTE
Senders will block when channel is full and receivers will block when
channel is empty.  The communication is atomic only when the channel
is unbuffered.
#+END_QUOTE

Then, when the channel is unbuffered, senders will always block
waiting for a receivers and receivers will always block waiting for a
sender.

** Non-deterministic choice

Non-deterministic choice provides processes with the ability to
randomly select between a set of possible atomic communications. In
the Go programming language the construct for this is called
"select"[fn:3], other languages call it "alt". Select statements
choose which of a set of possible send or receive operations will
proceed and is very useful when dealing with more than 1 channel per
process.

** Dchan CSP semantics

Dchan supports atomic communications and it is guaranteed to be atomic
across the network with the help of the 9P file abstraction.

Non-deterministic choice, in the other hand, is a much more complex
task to implement in distributed way and escapes from the file
semantics. The problem arises from the fact that it requires a special
API to "mark" a set of channels to participate in the "select", but
the most closest file's syscall to achieve this transparently are
select/poll/epoll, but they doesn't map to any 9P message in the
protocol. Dchan doesn't support "select", but apart from being complex
to implement and requiring an API, it could be implemented in the
future.

** Client interface

To mount a new dchan file server is required only few commands.
On a stock linux kernel, what you need to type is:

#+begin_src bash
mkdir -p /n/dchan
mount -t 9p -o port=6666,dfltuid=`id -u`,dfltgid=`id -g` \
    192.168.10.56 /n/dchan <ip-of-dchan-server> /n/dchan
#+end_src

The mount command above will use the linux kernel to establish a new
client connection to the file server. Once established, the kernel
will present the remote file system in the /n/dchan directory. After
that you can use traditional unix tools (file, cat, sed, etc) to
interact with the files on it.

** Trade-offs

Using a file interface have several benefits, but some problems
too.

- Error handling: The network is a lot more unreliable than local disk
  and this can be a source of problems if programmers do not
  understand this correctly. The majority of software does not handle
  disk failures and does not try to remount the file system if the
  hardware enter in a failure state, but when using network, failures
  happens all the time and programs needs to be aware of that.

- Framing: Each software in the conversation needs to agree in what is
  their understanding of a message. If no convention is used between
  all of the softwares, then some kind of framing protocol must be
  used to ensure only complete messages are interpreted. The problem
  arises from two facts: First, each software can use whatever value
  it want in the amount of bytes of the read and write syscalls,
  leading to some programs processing incomplete messages if the
  amount of bytes disagree. Second, sending bytes over the network
  link isn't an atomic operation, and for that reason, send/write
  syscalls for socket commonly returns the amount of bytes completely
  sent. If the other end cannot identify that the packets received
  aren't a complete message then it can process corrupt or incomplete
  data.


Solutions to the problems above are proposed in the section
[[Implementation][Implementation]].

** Messaging

Using a file interface messaging is simpler:

| syscall      | dchan semantics / effect     |
|--------------+------------------------------|
| open         | Open an existing channel     |
| open(OCREAT) | Create a new channel         |
| read         | Read messages from channel   |
| write        | Write a message into channel |
| stat         | Get info of channel          |
| close        | Close the channel            |
| unlink       | Remove an existing channel   |

** Text messages

Dchan has the principle of being simple and easy to debug. To the
latter be possible, is strongly encouraged the use of text-based
messages instead of binary or compacted text. We'll not optimize it
for performance until we really reach that point.

Using a text message format we can simplify both the clients and
server.

- No need for libraries to encode/decode messages;
- Easy to debug in the network;
- Easy to testing;

** Ctl

Dchan has only one special served file called ctl to manage channel
metrics and settings.

*** Metrics

The only metrics exposed until now is:

- rx - Receiver rate in messages/second.
- tx - Transmission rate in messages/second.
- arx - Average rx.
- atx - Average tx.

You can get this statistics reading the ctl file, like below:

#+BEGIN_SRC bash
$ cd /n/dchan
$ cat ctl
/core/input    0    25221    25221    25221    25221
/data/input    256  35002    34255    36222    36025

#+END_SRC

The output format is:

#+BEGIN_EXAMPLE
<filename>    <channel size>    <rx>    <tx>    <arx>    <atx>
#+END_EXAMPLE

The blank separator is TAB.

The metrics are updated each second.

*** Settings

For now, there's only one setting available: channel size.

See below the format to update the channel size for file /data/input:

#+BEGIN_SRC bash
$ cd /n/dchan
$ mkdir data
$ touch data/input
$ cat ctl
/data/input    0    0    0    0    0
$ echo "/data/input 256" >> ctl

#+END_SRC

The size of channel can be updated at any time, but be aware that during
the update of channel the file operations on this specific file will
block until finished.

** Composability

It's possible to create a virtual file system representation of
multiple dchan file servers. It's useful for inter-teams
communications without the need of using a central dchan server.
This feature is given by union file system capabilities of the
Operating System.

The Linux and BSD kernels supports various flavours of union file
system drivers, but this section will demonstrate the use of the most
recent union file system of the Linux Kernel called `overlayfs`.

From Linux documentation:

#+begin_quote
An overlay filesystem combines two filesystems - an 'upper' filesystem
and a 'lower' filesystem.  When a name exists in both filesystems, the
object in the 'upper' filesystem is visible while the object in the
'lower' filesystem is either hidden or, in the case of directories,
merged with the 'upper' object. @@html:<div
align="right"><i>@@Neil Brown in [[https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt][OverlayFS Documentation]].@@html:</i></div>@@
#+end_quote

Using this concept is possible to create file trees composed of
multiple dchan servers without the needs of implementing anything on
it.

** Testing

Developing a distributed software involves lots of testing because
failures occurs very frequently. When you build a local software, with
the entire business logic running at one local memory address space,
we can ignore the majority of operating system and hardware faults and
focus only in testing the logic inside the program's source code. But
when software's logic is spread in the network, several classes of
bugs can arises because pieces of the logic are on a remote machine.

On linux, any file system syscall executed on a disconnected mounted
9P file system will result in a -EIO error (Input/Output
error). Applications using dchan should verify the return value of
read/write functions and, if the value returned is -EIO, then it
should re-open the file when a re-connection with the file server is
finished. To re-connect, a new mount syscall establishing a new client
connection with the file server is required. Linux mount supports the
remount option, enabling then to reuse the mount point already used by
applications (no need to cwd again to directory). The remount can be
done explicitly by the application using dchan or by an external
software. This topic will be more detailed in the section [[dchan-proxy][dchan-proxy]].

* Footnotes

[fn:1] R. Milner, "A Calculus of Communicating Systems", Lecture Notes
in Computer Science, Vol. 92, Springer-Verlag, 1980.

[fn:2] Ptolemy II: http://ptolemy.eecs.berkeley.edu/papers/99/HMAD/html/csp.html

[fn:3] https://golang.org/ref/spec\#Select_statements
