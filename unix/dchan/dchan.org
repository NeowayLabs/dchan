As stated before, Dchan is a literate program, then this document is
all you need to understand all of it's concepts, design choices,
and get the source code.

It was developed using [[http://orgmode.org/][orgmode]], but isn't required to use emacs to
build or contribute to the project. The project is composed of org
files and a full featured Makefile. The Makefile have all of the
commands you need to generate the book on various formats, extract the
source code, build the software, execute tests, and so on.

If you use Emacs editor, you don't need this Makefile at all, because
orgmode is fully integrated.

For non-emacs developers, the development process is:

1. Change org files;
2. Run make

*Never touch the generated source code.*

* Dependencies

- Org dependency

If you use Emacs, everything is already installed.

For non-emacs developers, install [[https://github.com/fniessen/orgmk][orgmk]].

- Go

Read the [[https://golang.org/doc/install][Go Getting started]] tutorial.

* Implementation

** Dchan

*** Source Makefile

#+BEGIN_SRC makefile :tangle Makefile
all: clean tangle build test

tangle:
	org-tangle dchan.org

deps:
	go get -v -t ./...

build: tangle deps
	go build -v

test: tangle build
	chmod +x tests/acceptance/*.sh
	./tests/acceptance/vfs.sh

clean:
	rm -f tests/acceptance/*.sh
	rm -f *.go

#+END_SRC

*** Introduction

    Dchan is a 9P file server developed with go9p library. This
    library resembles the old plan9's lib9p, but with some
    simplifications in the API. Behind the good design of lib9p and
    go9p is where dchan really shines. They provide a server
    abstraction that simplify dchan implementation. The file server
    author doesn't need to worry about the 9P protocol internals
    working, focusing on the 9P file messages only. Then Dchan logic
    is most related to CSP than 9P semantics.

    For more information about Dchan design see the [[Architecture][Architecture
    section]].

*** Acceptance testings

    Dchan is a 9P file server, then the most basic acceptance tests
    are related to the exposed file tree interface. It must be
    consistent and behave as a local disk file system. Traditional
    unix tools as /cat/, /grep/, /sed/, /tee/, etc, must work without
    problems.

    Dchan acceptance tests uses the [[Testing Infraestructure][Testing Infrastructure]] created
    before.

**** Ensures dchan is mountable on UNIX

     This tests only ensures dchan is a mountable fs and clients can
     change the current directory to the mounted one (cd /tmp/dchan).

#+NAME: src-dchan-tests-acceptance-vfs
#+BEGIN_SRC sh :tangle tests/acceptance/vfs.sh :shebang #!/bin/bash
set -e

. ../testing/helpers.sh

DAEMONPID=""

function startDchan {
    local cwd="$(pwd)"

    ./dchan -addr ":6666" -d &

    BACKENDPID=$!

    cd "${cwd}"
}

function changedir {
    local targetdir="$1"

    cd "${targetdir}" || echo "ACCEPTANCE TEST ERROR: Unable to cd into mount point"
}

function readctl {
    local mntp="$1"
    local expected=""
    local cwd="$(pwd)"

    cd "${mntp}"
    local result="$(cat ctl)"

    if [ "${expected}" != "${result}" ]; then
        echo "Failed, received: ${result}"
    fi

}

function verify_concurrency {
    local mntp="$1"


}

# Running backend 9P file server

MNTPOINT="/tmp/dchan"

setup "${MNTPOINT}" "tcp!0.0.0.0!6666" "$(pwd)/dchan -addr 0.0.0.0:6666"

RES="`changedir \"${MNTPOINT}\"`"
if [ -n "$RES" ]; then
    echo "Failed to change dir: $RES"
    teardown "${MNTPOINT}" "${DAEMONPID}"
    exit 1
fi

RES="`readctl \"${MNTPOINT}\"`"
if [ -n "$RES" ]; then
    echo "Failed read ctl: $RES"
    teardown "${MNTPOINT}" "${DAEMONPID}"
    exit 1
fi

RES="`verify_concurrency \"${MNTPOINT}\"`"
if [ -n "$RES" ]; then
    echo "Failed to verify concurrency of 9P messages"
    teardown "${MNTPOINT}" "${DAEMONPID}"
    exit 1
fi

teardown "${MNTPOINT}" "${DAEMONPID}"
#+END_SRC

*** Dchan

    Dchan extends the go9p file server (/srv.File/) data structure,
    overriding the required methods for opening, reading, writing,
    etc, files. The core data structure is /File/ and it can be
    seen below:

#+NAME: src-dchan-file-dat
#+BEGIN_SRC go
type File struct {
	srv.File
        aux faux
}
#+END_SRC

    /Faux/ stores auxiliary data for each file.

#+NAME: src-dchan-faux-dat
#+BEGIN_SRC go
type (
	req struct {
		fid    *srv.FFid
		data   []byte
		offset uint64
	}

	faux struct {
		fullpath string
		ftype uint8

		channel  chan []byte
		chansize uint64

		rq chan req
		rw chan req

		rx    uint64
		tx    uint64
		avgrx uint64
		avgtx uint64

                *sync.Mutex
	}

	fauxlist struct {
		aux  *faux
		next *fauxlist
	}
)

const Fctl = iota + 1

const MaxRQueue = 1024
const MaxWQueue = 1024

#+END_SRC

    /Files/ stores the list of all files created in the file
    server. /Fileslk/ is a lock mutex for synchronize access to
    /files/ global variable.

#+NAME: src-dchan-file-files
#+BEGIN_SRC go
var (
	files *fauxlist
	fileslk *sync.Mutex
)
#+END_SRC

    /Createctl/ is the function responsible for creation of the /ctl/
    file.

#+NAME: src-dchan-file-createctl
#+BEGIN_SRC go
func createctl(root *srv.File, user p.User) error {
	f := &File{}
        f.aux.Mutex = &sync.Mutex{}
	f.aux.ftype = Fctl

	err := f.Add(root, "ctl", user, nil, 0777, f)

	if err != nil {
		return err
	}

	return nil
}
#+END_SRC

    /File/ have methods to handle each file operation. For now, the
    /Read/ method only have a fixed size string.

#+NAME: src-dchan-file-dat-read
#+BEGIN_SRC go
func (file *File) Read(fid *srv.FFid, buf []byte, _ uint64) (int, error) {
	buffer := bytes.NewBuffer(make([]byte, 0, 1024))

	fileslk.Lock()

	for l := files; l != nil; l = l.next {
		aux := l.aux

		aux.Lock() // sync with filestats

		written, err := buffer.Write([]byte(fmt.Sprintf(
			"%s\t%d\t%ld\t%ld\t%ld\t%ld\n",
			aux.fullpath,
			aux.chansize,
			aux.rx,
			aux.tx,
			aux.avgrx,
			aux.avgtx,
		)))

		aux.Unlock()

		if err != nil {
			fileslk.Unlock()
			return 0, err
		}

		buffer.Grow(1024 - written) // guaranteed to be > 0
	}

	data := buffer.Bytes()
	n := len(data)

	if len(buf) < n {
		n = len(buf)
	}

	copy(buf[:n], data)
	return n, nil
}
#+END_SRC

    /Write/, /Stat/ and /Wstat/ aren't implemented yet:

#+NAME: src-dchan-file-dat-meth
#+BEGIN_SRC go
func (file *File) Write(fid *srv.FFid, data []byte, offset uint64) (int, error) {
	d := make([]byte, len(data))
	copy(d, data)
	file.aux.channel <- d

	return len(data), nil
}

func (file *File) Wstat(fid *srv.FFid, dir *p.Dir) error {
	return nil
}

func (file *File) Remove(fid *srv.FFid) error {
	return nil
}

#+END_SRC

#+NAME: src-dchan-fs.go
#+HEADER: :imports '("fmt" "bytes" "sync" "github.com/lionkov/go9p/p" "github.com/lionkov/go9p/p/srv")
#+BEGIN_SRC go :noweb yes :tangle fs.go :main no :package main
<<src-dchan-file-dat>>
<<src-dchan-faux-dat>>

<<src-dchan-file-files>>

func init() {
     fileslk = &sync.Mutex{}
}

<<src-dchan-file-createctl>>
<<src-dchan-file-dat-read>>
<<src-dchan-file-dat-meth>>
#+END_SRC

    Main is the module responsible to parse the command-line arguments and
    initialize the 9P file server.

    Dchan arguments are listed below:

+----------+---------------+------------------------+
| argument | default value |      description       |
+----------+---------------+------------------------+
|  addr    |    :6666      | network listen address |
+----------+---------------+------------------------+
|  debug   |    not set    |    Enable debugging    |
+----------+---------------+------------------------+


    Command-line arguments are defined below:

#+NAME: src-dchan-cmdargs
#+BEGIN_SRC go
var addr = flag.String("addr", ":6666", "network address")
var debug = flag.Bool("d", false, "print debug messages")
#+END_SRC

    The function main initialize a file server (/srv.Fsrv/ and add the
    /ctl/ file to root of the filesystem (/). The root have permission
    bits 0777 until we have a good understanding of the way services
    will communicate. The Dotu attribute of file server indicates that
    server is (or not) compatible with 9P2000.u specification. The
    9P2000.u have some extensions for unix, and it is recommended for
    unix file servers (our case).

#+NAME: src-dchan-main
#+BEGIN_SRC go
var root *srv.File

func main() {
	var err error
	var s *srv.Fsrv

	flag.Parse()

	user := p.OsUsers.Uid2User(os.Geteuid())
	root = new(srv.File)

	err = root.Add(nil, "/", user, nil, p.DMDIR|0777, nil)

	if err != nil {
		goto error
	}

        err = createctl(root, user)

        if err != nil {
		goto error
	}

	s = srv.NewFileSrv(root)
	s.Dotu = true

	if *debug {
		s.Debuglevel = 1
	}

	if !s.Start(s) {
		err = errors.New("Failed to start file server")
		goto error
	}

	err = s.StartNetListener("tcp", *addr)

	if err != nil {
		goto error
	}

	return

error:
	log.Println(fmt.Sprintf("Error: %s", err))
}
#+END_SRC

#+NAME: src-main.go
#+HEADER: :imports '("errors" "flag" "fmt" "log" "os" "github.com/lionkov/go9p/p" "github.com/lionkov/go9p/p/srv")
#+BEGIN_SRC go :tangle main.go :noweb yes :main no :package main :exports none
<<src-dchan-cmdargs>>
<<src-dchan-main>>
#+END_SRC


* Test cases

** Network partitions

Network partition is the most frequent problem that can affect
Dchan. There's some cases that needs to be covered in order to achieve
reliability in the exchange of messages.
