As stated before, Dchan is a literate program, then this document is
all you need to understand all of it's concepts, design choices,
and get the source code.

It was developed using [[http://orgmode.org/][orgmode]], but isn't required to use emacs to
build or contribute to the project. The project is composed of org
files and a full featured Makefile. The Makefile have all of the
commands you need to generate the book on various formats, extract the
source code, build the software, execute tests, and so on.

If you use Emacs editor, you don't need this Makefile at all, because
orgmode is fully integrated.

For non-emacs developers, the development process is:

1. Change org files;
2. Run make

*Never touch the generated source code.*

* Dependencies

- Org dependency

If you use Emacs, everything is already installed.

For non-emacs developers, install [[https://github.com/fniessen/orgmk][orgmk]].

- Go

Read the [[https://golang.org/doc/install][Go Getting started]] tutorial.

* Implementation

** dchan-proxy

** Source Makefile

#+BEGIN_SRC makefile :tangle Makefile
all: clean tangle build test

tangle:
	org-tangle dchan.org

build: tangle
	go build -v

test: tangle build
	chmod +x tests/acceptance/*.sh
	./tests/acceptance/vfs.sh

clean:
	rm -f tests/acceptance/*.sh
	rm -f *.go
	rm -f Makefile

#+END_SRC

** Main module

Main is the module responsible to parse the command-line arguments and
initialize the 9P file server.

#+BEGIN_SRC go :tangle main.go :imports "fmt" :main yes
fmt.Printf("Dchan server")
#+END_SRC

#+RESULTS:

* Test cases

** Network partitions

Network partition is the most frequent problem that can affect
Dchan. There's some cases that needs to be covered in order to achieve
reliability in the exchange of messages.
